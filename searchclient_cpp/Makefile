RELEASE ?= false

# @todo: figure out where we compile 64bit
DEBUG_FLAGS = -O0 -g
RELEASE_FLAGS = -O3 -ffast-math -march=native -flto -DNDEBUG

ifeq ($(RELEASE), false)
	OPT_FLAGS = $(DEBUG_FLAGS)
else
	OPT_FLAGS = $(RELEASE_FLAGS)
endif

CXX = clang++
CXXFLAGS = -std=c++17 -Wall -Wextra -Weffc++ $(OPT_FLAGS) -MMD -MP
INCLUDES = -Iinclude

SRC_DIR = src
INC_DIR = include
OBJ_DIR = build

SOURCES = $(wildcard $(SRC_DIR)/*.cpp)
HPP_HEADERS = $(wildcard $(INC_DIR)/*.hpp)
OBJECTS = $(SOURCES:$(SRC_DIR)/%.cpp=$(OBJ_DIR)/%.o)
EXECUTABLE = searchclient

# Benchmark
BENCHMARK_DIR = ../benchmarks

# Flamegraph
FLAMEGRAPH_DIR = ../lib/FlameGraph
FLAMEGRAPH_STRATEGY = bfs
LEVEL_FILE = ../levels/warmup/MAPF02C.lvl
FLAMEGRAPH_SVG = cpu_flamegraph.svg
PERF_FREQ = 399

PERF_DATA_FILE = perf.data
PERF_SCRIPT_OUT = out.perf
FOLDED_OUT = out.folded 


# Create if doesn't exist
$(shell mkdir -p $(OBJ_DIR))

all: $(EXECUTABLE)

$(EXECUTABLE): $(OBJECTS)
	$(CXX) $(CXXFLAGS) -o $@ $^

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

# Include dependency files generated by -MMD flag
-include $(OBJECTS:.o=.d)

clean:
	rm -rf $(OBJ_DIR) $(EXECUTABLE) $(OBJECTS:.o=.d) $(TEST_BUILD_DIR)

run: $(EXECUTABLE)
	./$(EXECUTABLE)

run_benchmark: $(EXECUTABLE)
	cd $(BENCHMARK_DIR) && python run_benchmarks.py

flamegraph: $(EXECUTABLE)
	@echo "--- Generating CPU Flame Graph ---"
	@echo "Step 1: Recording performance data with perf..."
	@echo "NOTE: This may require sudo privileges or adjusting /proc/sys/kernel/perf_event_paranoid."
	@echo "Running: perf record -F $(PERF_FREQ) -g -- ./$(EXECUTABLE) $(FLAMEGRAPH_STRATEGY)< $(LEVEL_FILE)"
	@# Run perf record. Add 'sudo' before 'perf' if needed.
	perf record -F $(PERF_FREQ) -g -- ./$(EXECUTABLE) $(FLAMEGRAPH_STRATEGY) < $(LEVEL_FILE)
	@echo "Step 2: Converting perf data to text format..."
	perf script > $(PERF_SCRIPT_OUT)
	@echo "Step 3: Collapsing stacks using FlameGraph scripts..."
	@# Check if FlameGraph directory exists
	@[ -d "$(FLAMEGRAPH_DIR)" ] || ( echo "Error: FlameGraph directory not found at $(FLAMEGRAPH_DIR)"; exit 1 )
	cat $(PERF_SCRIPT_OUT) | $(FLAMEGRAPH_DIR)/stackcollapse-perf.pl > $(FOLDED_OUT)
	@echo "Step 4: Generating SVG flame graph..."
	cat $(FOLDED_OUT) | $(FLAMEGRAPH_DIR)/flamegraph.pl > $(FLAMEGRAPH_SVG)
	@echo "--- Flame Graph generated: $(FLAMEGRAPH_SVG) ---"
	@echo "Step 5: Cleaning up intermediate files..."
	rm -f $(PERF_DATA_FILE) $(PERF_SCRIPT_OUT) $(FOLDED_OUT)
	@echo "Done. Open $(FLAMEGRAPH_SVG) in a web browser."

# Unit tests
TEST_BUILD_DIR := build_tests
$(shell mkdir -p $(TEST_BUILD_DIR))

TEST_INCLUDES := -Iinclude
TEST_CPS      := $(wildcard tests/test_*.cpp)
TEST_EXES     := $(patsubst tests/%.cpp,$(TEST_BUILD_DIR)/%,$(TEST_CPS))

# Library objects (exclude the main program)
LIB_OBJECTS := $(filter-out $(OBJ_DIR)/searchclient.o,$(OBJECTS))

.PHONY: test
test: $(LIB_OBJECTS) $(TEST_EXES)
	@for t in $(TEST_EXES); do \
	  echo "-> running $$t"; \
	  ./$$t; \
	done

# Compile each tests/*.cpp into build_tests/<name>, linking only library .o files
$(TEST_BUILD_DIR)/%: tests/%.cpp $(HPP_HEADERS) $(LIB_OBJECTS)
	$(CXX) $(CXXFLAGS) $(TEST_INCLUDES) $< $(LIB_OBJECTS) -o $@

.PHONY: all clean run 